<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>【学习笔记】$Fe(OH)_3$的制备</title>
      <link href="/2021/04/15/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Fe(OH)3%E8%83%B6%E4%BD%93%E7%9A%84%E5%88%B6%E5%A4%87/"/>
      <url>/2021/04/15/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91Fe(OH)3%E8%83%B6%E4%BD%93%E7%9A%84%E5%88%B6%E5%A4%87/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="制备"><a href="#制备" class="headerlink" title="制备"></a>制备</h3><p>将 $FeCl_3$ 饱和溶液滴入沸水中，继续加热，至红褐色停止加热。</p><blockquote><p>$FeCl_3+3H_2O \ce{&lt;=&gt;}$</p></blockquote>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 化学 </tag>
            
            <tag> 制备 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【读书摘记】《黄金时代》 -王小波</title>
      <link href="/2021/01/31/%E3%80%90%E8%AF%BB%E4%B9%A6%E6%91%98%E8%AE%B0%E3%80%91%E3%80%8A%E9%BB%84%E9%87%91%E6%97%B6%E4%BB%A3%E3%80%8B%20-%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
      <url>/2021/01/31/%E3%80%90%E8%AF%BB%E4%B9%A6%E6%91%98%E8%AE%B0%E3%80%91%E3%80%8A%E9%BB%84%E9%87%91%E6%97%B6%E4%BB%A3%E3%80%8B%20-%E7%8E%8B%E5%B0%8F%E6%B3%A2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="摘记"><a href="#摘记" class="headerlink" title="摘记"></a>摘记</h2><ul><li><p><strong>放声大哭从一个梦境进入另一个梦境，这是每个人都有的奢望。</strong></p></li><li><p><strong>这就是所谓的真实。真实就是无法醒来。那一瞬间她终于明白了在世界上有些什么，下一瞬间她就下定了决心，走上前来，接受摧残，心里快乐异常。</strong></p></li><li><p><strong>我一步步走进星星的万花筒。没有人能告诉我我在何处，没人能告诉我我是什么人，直到入睡，我心里还带着一丝迷惘。</strong></p></li></ul><a id="more"></a><ul><li><p><strong>我慢慢走回家去，那天夜里没有月亮，但有星光。对于我这样在那些年里走惯夜路的人来说，这点亮足够了。</strong></p></li><li><p><strong>李先生成为革命者也是因为他心软，不但见不得女人的眼泪，而且见不得别人的苦难。</strong></p></li><li><p><strong>虽然死法各异，但每个人身上都有足以让他们再活下去的能量。我真希望他们得到延长生命的机会，继续活下去。我自己也再不想掏出肠子挂在别人脖子上。</strong></p></li><li><p><strong>我还知道很多更悲惨的事——在我看来，人生最大的悲哀，在于受愚弄。这些悲惨的故事还写得完吗？</strong></p></li><li><p><strong>指标这种东西，是一切浪漫情调的死敌。</strong></p></li><li><p><strong>爬炉筒子没有一点好处，只能带来刻骨铭心的痛苦，但我还是要爬。这大概是说明你干的事越傻，决心就会越大吧。这也说明我喜欢自己愚弄自己，却不喜欢被别人愚弄。</strong></p></li><li><p><strong>灰白色的面孔上罩着一层冷汗，在这上面又有一层皱皱巴巴、湿淋淋的惨笑，就是献给胜利者的贡品。</strong></p></li><li><p><strong>人活在世界上，快乐和痛苦本就分不清。所以我只求它货真价实。</strong></p></li><li><p><strong>没被电到的蜻蜓都对正在死去的蜻蜓漠然视之。因此我想到，可能蜻蜓要到电流从身上通过时，才知道中了头彩，如梦方醒吧。</strong></p></li><li><p><strong>我像一切生在革命时期的人一样，有一半是虐待狂，还有一半是受虐狂，全看碰见的是谁。</strong></p></li><li><p><strong>我和别人一样，得爱我恨的人，挣钱吃饭，成家立业，养家活口。总而言之，除非有奇迹发生，苦多乐少，而奇迹却总是不发生。我竭尽心力，没找到一丁点神奇。</strong></p></li><li><p><strong>没有人因为她长得漂亮就杀她祭神，也没人因为我机巧狠毒就把我钉死。这不是因为我们不配，而是因为没人拿我们当真——而自己拿自己当真又不可能。</strong></p></li><li><p><strong>我们既然影响不好，就该受到惩罚，但是惩罚起来影响也不好。所以她所受的羞辱还是带着浪漫情调，只值得嘻嘻一笑，或者哈哈一笑。</strong></p></li><li><p><strong>我仿佛已经很老了，又好像很年轻。革命时期好像是过去了，又仿佛还没开始。爱情仿佛结束了，又好像还没有到来。我仿佛中过了头彩，又好像还没到开彩的日子。这一切好像是结束了，又仿佛是刚刚开始。</strong></p></li><li><p><strong>不管怎么说，我认为咱们国家里前一类读者够多了，可以有一种正经文学了；若说我们国家的全体成年人均处于天真未凿、善恶莫辨的状态，需要无时无刻的说教，这是我绝不敢相信的。自我懂事以来，领导者对我国人民的生活水平总是评价过高，对我国人民的智力、道德水平总是评价过低，我认为这是一种偏差。</strong></p></li></ul><hr><h2 id="出版信息"><a href="#出版信息" class="headerlink" title="出版信息"></a>出版信息</h2><blockquote><p>作者:  王小波<br>出版社: 陕西师范大学出版社<br>出品方: 博集天卷<br>出版年: 2009-07-01</p></blockquote>]]></content>
      
      <categories>
          
          <category> 读书摘记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王小波 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【学习笔记】利用偏导求解不等式（拉格朗日数乘法）</title>
      <link href="/2021/01/10/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%88%A9%E7%94%A8%E5%81%8F%E5%AF%BC%E6%B1%82%E8%A7%A3%E4%B8%8D%E7%AD%89%E5%BC%8F%EF%BC%88%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%95%B0%E4%B9%98%E6%B3%95%EF%BC%89/"/>
      <url>/2021/01/10/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%88%A9%E7%94%A8%E5%81%8F%E5%AF%BC%E6%B1%82%E8%A7%A3%E4%B8%8D%E7%AD%89%E5%BC%8F%EF%BC%88%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%95%B0%E4%B9%98%E6%B3%95%EF%BC%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="偏导概念的引入"><a href="#偏导概念的引入" class="headerlink" title="偏导概念的引入"></a>偏导概念的引入</h2><blockquote><p>在数学中，一个多变量的函数的偏导数，就是它关于其中一个变量的导数而保持其他变量恒定（相对于全导数，在其中所有变量都允许变化）。<br>在一元函数中，导数就是函数的变化率。对于二元函数的“变化率”，由于自变量多了一个，情况就要复杂的多。<br>在 $xOy$ 平面内，当动点由 $P(x0,y0)$ 沿不同方向变化时，函数 $f(x,y)$ 的变化快慢一般来说是不同的，因此就需要研究 $f(x,y)$ 在 $(x0,y0)$ 点处沿不同方向的变化率。<br>偏导数反映的是函数沿坐标轴正方向的变化率。</p></blockquote><p>——以上内容摘自<a href="https://baike.baidu.com/item/%E5%81%8F%E5%AF%BC%E6%95%B0/5536984?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>求 $z=x^2-2xy+y^3$ 的偏导数 $\frac{\partial z}{\partial x},\frac{\partial z}{\partial y}$</p><ul><li>步骤一：用题中表达式进行替换</li><li>步骤二：把其他字母看成常数</li><li>步骤三：求导</li></ul><blockquote><p>$\frac{\partial z}{\partial x}=\frac{\partial (x^2-2xy+y^3)}{\partial x}=2x-2y$ 即 $\frac{\partial (x^2-2xa+a^3)}{\partial x}=2x-2a$</p><p>$\frac{\partial z}{\partial y}=\frac{\partial (x^2-2xy+y^3)}{\partial y}=-2x+3y^2$ 即 $\frac{\partial (a^2-2ay+y^3)}{\partial y}=-2a+3y^2$</p></blockquote><a id="more"></a><hr><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>由于偏导数属于高等数学，本文仅简单说明其在高中不等式解题中的应用思路。</p><p>（2011·浙江理）设 $x,y$  为实数，若 $4x^2+y^2+xy=1$ ，则 $2x+y$ 的最大值是 <strong>__</strong> 。</p><blockquote><p>设 $f(x,y,\lambda)=2x+y+\lambda(4x^2+y^2+xy-1)$</p></blockquote><p>由 $4x^2+y^2+xy=1$ 知 $4x^2+y^2+xy-1=0$</p><p>所以 $f(x,y,\lambda)=2x+y+\lambda(4x^2+y^2+xy-1)=2x+y+\lambda ·0=2x+y$ ，跟线性规划一致，可将 $f(x,y,\lambda)$ 看作目标函数。其中 $\lambda$ 可以看成是目标 $2x+y$ 在约束条件 $4x^2+y^2+xy-1=0$ 下可自由伸缩的空间。</p><p><strong>一般地：在约束条件 $h(x,y)=0$ 下，求 $g(x,y)$ 的最值问题，可以令 $f(x,y,\lambda)=g(x,y)+\lambda ·h(x,y)$</strong></p><blockquote><p>得方程组$\begin{cases} \large{\frac{\partial f(x,y,\lambda)}{\partial x}=2+\lambda(8x+y)=0} \\ \\ \large{\frac{\partial f(x,y,\lambda)}{\partial y}=1+\lambda(2y+x)=0} \\  \\ \large{4x^2+y^2+xy=1} \end{cases}$ </p></blockquote><p>一般地，$\begin{cases} \large{\frac{\partial f(x,y,\lambda)}{\partial x}=0} \\ \\ \large{\frac{\partial f(x,y,\lambda)}{\partial y}=0} \\  \\ \large{h(x,y)=0} \end{cases}$ </p><blockquote><p>消元解得唯一解 $2x=y=\frac{\sqrt{10}}{5}$ ，此时 $2x+y$ 取得最大值 $\frac{2\sqrt{10}}{5}$</p></blockquote>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 偏导 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 不等式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【杂谈】日语五十音随机测试器Onoii</title>
      <link href="/2018/10/29/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3%E9%9A%8F%E6%9C%BA%E6%B5%8B%E8%AF%95%E5%99%A8/"/>
      <url>/2018/10/29/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E6%97%A5%E8%AF%AD%E4%BA%94%E5%8D%81%E9%9F%B3%E9%9A%8F%E6%9C%BA%E6%B5%8B%E8%AF%95%E5%99%A8/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近在学日语，五十音总是记不住，就写了这个程序帮助记忆</p><p>灵感来自机房某大佬..但他的程序好奇怪啊分数为什么能扣到负啊还不肯改怎么回事啊</p><p>也不公开代码，我只能自己写一个自娱自乐了…</p><p><img src="https://ws1.sinaimg.cn/large/006sjNcEly1fwrl33xql1j32gw1b5b29.jpg" alt=""></p><a id="more"></a><p>会根据我的学习进度更新程序，加入新功能，敬请期待哦</p><h2 id="最近更新："><a href="#最近更新：" class="headerlink" title="最近更新："></a>最近更新：</h2><h3 id="2018-11-2"><a href="#2018-11-2" class="headerlink" title="2018.11.2"></a>2018.11.2</h3><ul><li><a href="/download/Onoii_v0.0.4.exe">Onoii_v0.0.4.exe</a></li></ul><blockquote><p>重构代码前最后一个版本，新增封面与部分细节优化</p></blockquote><h3 id="2018-10-29"><a href="#2018-10-29" class="headerlink" title="2018.10.29"></a>2018.10.29</h3><ul><li><a href="/download/Onoii_v0.0.3.exe">Onoii_v0.0.3.exe</a></li></ul><blockquote><p>新增练习模式与返回主菜单选项，部分细节优化。</p></blockquote><ul><li><a href="/download/Onoii_v0.0.2.exe">Onoii_v0.0.2.exe</a></li></ul><blockquote><p>修复了上个版本restart后的初始化问题，新增五十音图查看与退出功能。</p></blockquote><ul><li>Onoii_v0.0.1.exe</li></ul><blockquote><p>仅支持清音部分，根据假名输入罗马音，现在的版本不适用看罗马音写不出假名的同学 <del>又不能在电脑上手写假名</del>，正在想办法解决…</p></blockquote>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>【游记】NOIP2018 提高组 初赛</title>
      <link href="/2018/10/14/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91NOIP2018%20%E6%8F%90%E9%AB%98%E7%BB%84%20%E5%88%9D%E8%B5%9B/"/>
      <url>/2018/10/14/%E3%80%90%E6%B8%B8%E8%AE%B0%E3%80%91NOIP2018%20%E6%8F%90%E9%AB%98%E7%BB%84%20%E5%88%9D%E8%B5%9B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>昨天考完后根本没有任何写游记的心情呐…</p><p>第一次参加 NOIP…体验极差，十四中康桥旁边比我们还荒凉还行</p><p>这出题人怎么又是九条可怜呀…</p><p>准备时间相当少也没有系统地去复习..就做了几张无足轻重的卷子，其实也有一部分轻视的态度，没有真正认真地去对待，才导致了这次的成绩相当不理想…</p><p>阅读程序审题不清丢了一道…不然还是有点希望？<br>我昨天中午为什么不和 TRUE_ZBY 他们出去吃饭而是在机房准备初赛啊啊啊啊他们讨论到那个 1984 了呀！！我…我看 6 比较顺眼就选了 6 蛤就错了蛤就退役了蛤<br>红蓝机那个是认真的嘛？甄姬出题实锤了</p><p>反正都是我自己的锅啦都是我的错啦（大哭<br><a id="more"></a><br>接受现实接受现实，在成绩出来之前，该停课还是要停..不然就要回去期中考试了（哦不）岂不是凉凉</p><p>估分 70 多？够不到分数线吧？</p><p>搬两张图了解一下：</p><p><img src="https://s1.ax1x.com/2018/10/14/iUtc0P.png" alt="iUtc0P.png"></p><p><img src="https://s1.ax1x.com/2018/10/14/iUt6mt.png" alt="iUt6mt.png"></p><p>在机房的日子我很开心<br><img src="https://s1.ax1x.com/2018/10/14/iUtffg.jpg" alt="iUtffg.jpg"></p><p>不过话说我竟然没想到把答案写在准考证上导致我忘了自己写的什么分数就更不可预知了耶？</p><p>今天第一次被阿，可能我学习不好的根源，就是我没被阿…吧</p><p>告辞告辞</p><hr><p>咦？没退役，耶</p><p>update on 18.10.26</p>]]></content>
      
      <categories>
          
          <category> 游记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>【题解】[ZJOI2007]棋盘制作</title>
      <link href="/2018/10/04/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BZJOI2007%5D%E6%A3%8B%E7%9B%98%E5%88%B6%E4%BD%9C/"/>
      <url>/2018/10/04/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BZJOI2007%5D%E6%A3%8B%E7%9B%98%E5%88%B6%E4%BD%9C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>国际象棋是世界上最古老的博弈游戏之一，和中国的围棋、象棋以及日本的将棋同享盛名。据说国际象棋起源于易经的思想，棋盘是一个 $8 \times 8$ 大小的黑白相间的方阵，对应八八六十四卦，黑白对应阴阳。</p><p>而我们的主人公小Q，正是国际象棋的狂热爱好者。作为一个顶尖高手，他已不满足于普通的棋盘与规则，于是他跟他的好朋友小W决定将棋盘扩大以适应他们的新规则。</p><a id="more"></a><p>小Q找到了一张由 $N \times M$ 个正方形的格子组成的矩形纸片，每个格子被涂有黑白两种颜色之一。小Q想在这种纸中裁减一部分作为新棋盘，当然，他希望这个棋盘尽可能的大。</p><p>不过小Q还没有决定是找一个正方形的棋盘还是一个矩形的棋盘（当然，不管哪种，棋盘必须都黑白相间，即相邻的格子不同色），所以他希望可以找到最大的正方形棋盘面积和最大的矩形棋盘面积，从而决定哪个更好一些。</p><p>于是小Q找到了即将参加全国信息学竞赛的你，你能帮助他么？</p><hr><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>包含两个整数 $N$ 和 $M$，分别表示矩形纸片的长和宽。接下来的 $N$ 行包含一个 $N \times M$ 的 $01$ 矩阵，表示这张矩形纸片的颜色（ $0$ 表示白色，$1$ 表示黑色）。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>包含两行，每行包含一个整数。第一行为可以找到的最大正方形棋盘的面积，第二行为可以找到的最大矩形棋盘的面积（注意正方形和矩形是可以相交或者包含的）。</p><hr><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><pre><code>3 31 0 10 1 01 0 0</code></pre><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><pre><code>46</code></pre><hr><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>对于 $20\%$ 的数据，$N,M≤80$<br>对于 $40\%$ 的数据，$N, M ≤ 400$<br>对于 $100\%$ 的数据，$N, M ≤ 2000$</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>标准悬线法，详见上一篇博客<a href="https://vsh-fd.github.io/2018/10/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E7%9F%A9%E9%98%B5%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">【学习笔记】最大子矩形问题</a></p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(re i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>;<span class="keyword">bool</span> f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) f^=!(ch^<span class="string">'-'</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=((x+(x&lt;&lt;<span class="number">2</span>))&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,height[<span class="number">2050</span>][<span class="number">2050</span>],lft[<span class="number">2050</span>][<span class="number">2050</span>],rit[<span class="number">2050</span>][<span class="number">2050</span>],ansc=<span class="number">0</span>,ansz=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> a[<span class="number">2050</span>][<span class="number">2050</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">        a[i][j]=read();</span><br><span class="line">        height[i][j]=<span class="number">1</span>;<span class="comment">//初始化高度值</span></span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span> <span class="keyword">and</span> a[i][j]!=a[i<span class="number">-1</span>][j]) height[i][j]=height[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(j!=<span class="number">1</span> <span class="keyword">and</span> a[i][j]!=a[i][j<span class="number">-1</span>]) lft[i][j]=lft[i][j<span class="number">-1</span>];<span class="comment">//递推找到左障碍点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j!=<span class="number">1</span> <span class="keyword">and</span> a[i][j]==a[i][j<span class="number">-1</span>]) lft[i][j]=j<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) drep(j,m,<span class="number">1</span>)&#123;</span><br><span class="line">        rit[i][j]=j;</span><br><span class="line">        <span class="keyword">if</span>(j!=m <span class="keyword">and</span> a[i][j]!=a[i][j+<span class="number">1</span>]) rit[i][j]=rit[i][j+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j!=m <span class="keyword">and</span> a[i][j]==a[i][j+<span class="number">1</span>]) rit[i][j]=j;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    rep(i,1,n)&#123; rep(j,1,m)&#123;</span></span><br><span class="line"><span class="comment">        printf("%lld ",rit[i][j]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    puts("");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123; rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span> <span class="keyword">and</span> a[i][j]!=a[i<span class="number">-1</span>][j])&#123;</span><br><span class="line">            lft[i][j]=max(lft[i][j],lft[i<span class="number">-1</span>][j]);<span class="comment">//更新左边界</span></span><br><span class="line">            rit[i][j]=min(rit[i][j],rit[i<span class="number">-1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        printf("%lld ",height[i][j]);</span></span><br><span class="line">        ansc=max(ansc,(rit[i][j]-lft[i][j])*height[i][j]);<span class="comment">//长方形面积</span></span><br><span class="line">        ansz=max(ansz,min(rit[i][j]-lft[i][j],height[i][j]));<span class="comment">//正方形边长</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    puts("");</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n%lld\n"</span>,ansz*ansz,ansc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.org/problemnew/show/P1169" target="_blank" rel="noopener">洛谷 P1169 [ZJOI2007]棋盘制作</a></p><hr><h3 id="CSDN链接（LaTeX可正常显示）"><a href="#CSDN链接（LaTeX可正常显示）" class="headerlink" title="CSDN链接（LaTeX可正常显示）"></a>CSDN链接（LaTeX可正常显示）</h3><p><a href="https://blog.csdn.net/Vsh_fd/article/details/112425160" target="_blank" rel="noopener">【题解】[ZJOI2007]棋盘制作</a></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悬线法 </tag>
            
            <tag> 最大子矩形 </tag>
            
            <tag> 动态规划,DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【学习笔记】最大子矩形问题</title>
      <link href="/2018/10/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E7%9F%A9%E9%98%B5%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/04/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E6%9C%80%E5%A4%A7%E5%AD%90%E7%9F%A9%E9%98%B5%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="问题类型"><a href="#问题类型" class="headerlink" title="问题类型"></a>问题类型</h2><p>给定一个含有障碍点的矩形，找出内部不含障碍点的、边与整个矩形平行或重合的最大子矩形。</p><hr><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p><strong>有效子矩形</strong>：内部不含障碍点的、边与整个矩形平行或重合的最大子矩形。<br><strong>极大子矩形</strong>：各边都与障碍点或整个矩形的边重合的有效子矩形。<br><strong>最大子矩形</strong>：最大的有效子矩形。</p></blockquote><p>最大子矩形 $\subseteq$ 极大子矩形 $\subseteq$ 有效子矩形</p><a id="more"></a><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>采用 <strong>极大化思想</strong></p><p>枚举所有极大子矩形，找到最大子矩形。</p><p>设矩形为 $n\times m$，障碍点数为 $s$。</p><h3 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h3><blockquote><p>时间复杂度 O( $s^2$ )，空间复杂度 O( $s$ )</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先考虑直接暴力枚举四个边界，然后判断是否为<strong>有效子矩形</strong>。</p><p>时间复杂度 O( $s^5$ )，产生大量的无效子矩形，妥妥的 TLE。</p><p>让我们对以上算法进行优化：</p><blockquote><p>将所有障碍点按横坐标排序并编号为 $1,2,3,…$<br>从左往右枚举极大子矩形左边界，以整个矩形上下边为边界。<br>向右扫描，枚举障碍点，修改上下边界使矩阵有效，复杂度 O( $s^2$ )。</p></blockquote><p>枚举左右边界时不要忘了加上整个矩形的左右边界！</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>复杂度比较优秀，适用于障碍点较少的稀疏图</p><h4 id="示题"><a href="#示题" class="headerlink" title="示题"></a>示题</h4><p><a href="https://vijos.org/p/1055" target="_blank" rel="noopener">Vijos 1055 WC2002 奶牛浴场</a></p><h3 id="算法二（悬线法）"><a href="#算法二（悬线法）" class="headerlink" title="算法二（悬线法）"></a>算法二（悬线法）</h3><blockquote><p>时间复杂度 O( $n\times m$ )，空间复杂度 O( $n\times m$ )</p></blockquote><p>重点来了！ \拍桌 \拍桌</p><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><blockquote><p><strong>有效竖线</strong>：除了两个端点外，不覆盖任何一个障碍点的竖直线段。<br><strong>悬线</strong>：上端覆盖了一个障碍点或者到达整个矩形上边界的有效竖线。</p></blockquote><p>我们称以点 $(i,j)$ 为底的悬线为点 $(i,j)$ 对应的悬线</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>一个矩形中共有 $(n-1)\times m$ 条悬线，即除了顶部的点外，其余的各点均有且只有一条与其对应的悬线。</p><p>枚举各条悬线，将其向左右两侧尽可能拓展，就可得到一个由 $(n-1)\times m$ 个悬线拓展形成的矩形的集合，而这个集合包含了所有的极大子矩形。</p><p>枚举悬线的时间复杂度是 O( $n\times m$ ) 的，即我们要在 O( $1$ ) 内拓展左右区间。</p><p>设 height$[ i,j ]$ 为点 $(i,j)$ 对应的悬线的长度，left$[i,j]$ 为点 $(i,j)$ 对应的悬线向左最多拓展到的位置，right$[i,j]$ 为点 $(i,j)$ 对应的悬线向右最多拓展到的位置。</p><blockquote><p>left$[i,j]$ 和 right$[i,j]$先初始化为点 $(i,j)$ 向左右最多拓展到的位置。</p></blockquote><p>这样，若 $(i-1,j)$ 为障碍点，height$[i,j]$=1，left$[i,j]$=0，right$[i,j]$=$m$</p><p>若 $(i-1,j)$ 不为障碍点：</p><blockquote><p>height$[i,j]$=height$[i-1,j]+1$<br>left$[i,j]$=$max$ ( left$[i-1,j]$ , left$[i,j]$ )<br>right$[i,j]$=$min$ ( right$[i-1,j]$ , right$[i,j]$ )</p></blockquote><p>这样就可以利用递推式，在 O( $1$ ) 的复杂度内拓展左右区间。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>复杂度与障碍点数无关，适合障碍点较稠密的矩阵求解，在障碍点较少时，不如算法一。</p><h4 id="示题-1"><a href="#示题-1" class="headerlink" title="示题"></a>示题</h4><p><a href="https://www.luogu.org/problemnew/show/P1169" target="_blank" rel="noopener">洛谷 P1169 [ZJOI 2007]棋盘制作</a></p><p>题解将发至下一篇博客</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/Clove_unique/article/details/50512624" target="_blank" rel="noopener">最大子矩阵问题&amp;悬线法 学习笔记</a> Clove_unique</p><hr><h2 id="CSDN链接（LaTeX可正常显示）"><a href="#CSDN链接（LaTeX可正常显示）" class="headerlink" title="CSDN链接（LaTeX可正常显示）"></a>CSDN链接（LaTeX可正常显示）</h2><p><a href="https://blog.csdn.net/Vsh_fd/article/details/112425131" target="_blank" rel="noopener">【学习笔记】最大子矩形问题</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悬线法 </tag>
            
            <tag> 最大子矩形 </tag>
            
            <tag> 动态规划,DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【学习笔记】卡特兰数</title>
      <link href="/2018/10/01/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
      <url>/2018/10/01/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>一个常见于数学问题中的数列，需要对题目有缜密的分析，而后便可以方便地解出答案。</p><p>*这是本博客第一篇使用 $LaTeX$ 语法的文章，如有错误还请见谅。</p><hr><p>卡特兰数又称卡塔兰数（Catalan Number），是组合数学中一个经常出现在各种计数问题中的数列。以比利时的数学家欧仁·查理·卡塔兰（1814–1894）的名字来命名。其前几项（下标从 0 开始）为：</p><pre><code>1,1,2,5,14,42,132,429,1430,4862,16796,58786,208012,742900, ...</code></pre><p><del>1730年我国清朝时期的明安图（蒙古人）比 Catalan 更早使用了 Catalan 数，见《割圜密率捷法》。</del><br><a id="more"></a></p><hr><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>递推式：</p><blockquote><p>$f(n) = \sum_{i=0}^{n-1}f(i) \times f(n-i-1)$</p></blockquote><p>另类递推式：</p><blockquote><p>$f(n) = \frac{f(n-1) \times (4 \times n - 2)}{n+1}$</p></blockquote><p>组合式：</p><blockquote><p>$f(n)= \frac{C_{2n}^{n}}{n+1}$</p></blockquote><p>另类组合式：</p><blockquote><p>$f(n)=C_{2n}^{n}-C_{2n}^{n-1}$</p></blockquote><hr><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>卡特兰数常见于下列问题：</p><blockquote><ol><li>连乘括号化</li><li>出栈次序</li><li>凸多边形三角形划分</li><li>给定节点组成二叉树</li><li>$n$ 对括号正确匹配</li></ol></blockquote><p>下面是三道经典的例题：</p><hr><h3 id="二叉树的计数"><a href="#二叉树的计数" class="headerlink" title="二叉树的计数"></a>二叉树的计数</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>已知一棵二叉树有 $n$ 个节点，问：该二叉树能组成多少种不同的形态？</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>设二叉树左子树节点数为 $i$，则右子树节点数为 $n-i-1$。</p><p>又设 $n$ 个节点的二叉树状态数为 $f(n)$，即可得到递推式</p><blockquote><p>$f(n)=\sum_{i=0}^{n-1}f(i) \times f(n-i-1)$</p></blockquote><p>答案是卡特兰数。</p><hr><h3 id="AB排列问题"><a href="#AB排列问题" class="headerlink" title="AB排列问题"></a>AB排列问题</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>有 $n$ 个 A 和 $n$ 个 B 排成一排，从第一个位置开始到任何位置，B 的个数不能超过 A 的个数，问：这样的排列有多少种？</p><blockquote><p>$n=1$ 时：AB，$f(1)=1$<br>$n=2$ 时：AABB ABAB，$f(2)=2$<br>$n=3$ 时：AAABBB AABBAB ABAABB ABABAB，$f(3)=5$</p></blockquote><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>即出栈次序问题。<br>如下图，上箭头表示 A，下箭头表示 B，递推得出结论为卡特兰数。</p><p><img src="https://s1.ax1x.com/2018/10/03/i33eU0.png" alt="i33eU0.png"></p><hr><h3 id="NOI-1988-乘法加括号"><a href="#NOI-1988-乘法加括号" class="headerlink" title="[NOI 1988]乘法加括号"></a>[NOI 1988]乘法加括号</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>对于连乘 $a_0\times a_1\times a_2\times …\times a_n$，加了括号后可改变它的运算顺序。问：有多少种不同的运算顺序？</p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>将连乘表示为一棵二叉搜索树，将 “$\times$” 作为节点，得到组合方案数为 $f(0) \times f(n-1)+ f(1) \times f(n-2)+…+f(n-1) \times f(0)$ </p><p>同 二叉树的计数</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《信息学奥赛之数学一本通》 林厚从</p><p><a href="https://baike.baidu.com/item/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/6125746?fr=aladdin" target="_blank" rel="noopener">卡特兰数_百度百科</a></p><hr><h2 id="CSDN链接（LaTeX可正常显示）"><a href="#CSDN链接（LaTeX可正常显示）" class="headerlink" title="CSDN链接（LaTeX可正常显示）"></a>CSDN链接（LaTeX可正常显示）</h2><p><a href="https://blog.csdn.net/Vsh_fd/article/details/112424986" target="_blank" rel="noopener">【学习笔记】卡特兰数</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卡特兰数 </tag>
            
            <tag> 数论,数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【题解】[NOIP模拟 9.29]matrix</title>
      <link href="/2018/09/29/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BNOIP%E6%A8%A1%E6%8B%9F%209.29%5Dmatrix/"/>
      <url>/2018/09/29/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BNOIP%E6%A8%A1%E6%8B%9F%209.29%5Dmatrix/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>求出满足以下条件的 n*m 的 01 矩阵个数：</p><blockquote><ol><li>第 i 行第 1~li 列恰好有 1 个 1。</li><li>第 i 行第 ri~m 列恰好有 1 个 1。</li><li>每列至多有 1 个 1。</li></ol></blockquote><p>补：li~ri中不能放 1（写的时候直接默认如此了不如初三小哥观察仔细）</p><a id="more"></a><hr><h3 id="输入数据"><a href="#输入数据" class="headerlink" title="输入数据"></a>输入数据</h3><p>第一行两个整数 n,m。接下来 n 行每行 2 个整数 li,ri。</p><hr><h3 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h3><p>一行一个整数表示答案。对 998244353 取模。</p><hr><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>2 62 45 6</code></pre><hr><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>12</code></pre><hr><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><blockquote><p>对于 20% 的数据，n,m &lt;= 12。<br>对于 40% 的数据，n,m &lt;= 50。<br>对于 70% 的数据，n,m &lt;= 300。<br>对于 100% 的数据，n,m &lt;= 3000，1 &lt;= li &lt; ri &lt;= m。</p></blockquote><hr><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>一道比较抽象的动态规划题。</p><p>打代码时一边写一边忘，一边忘一边写，所以写篇博客加深记忆。</p><p>因为每列只能放一个 1，所以我们可以把它拍成 1 行来考虑。</p><p>f[ i ][ j ]表示前 i 列共放置了 j 个右区间 1 的方案数。（拒绝感性理解）</p><p>转移方程：</p><blockquote><p>枚举 i，加上放或者不放右区间 1 的方案数。<br>越过左区间右端点时乘上需要放置的左区间 1 的方案数。</p></blockquote><p>具体可参考代码注释。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(re i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>;<span class="keyword">bool</span> f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) f^=!(ch^<span class="string">'-'</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=((x+(x&lt;&lt;<span class="number">2</span>))&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Online_Judge</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="string">"matrix.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"matrix.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line">ll n,m,l[<span class="number">3050</span>],r[<span class="number">3050</span>],f[<span class="number">3050</span>][<span class="number">3050</span>],lll[<span class="number">3050</span>],rr[<span class="number">3050</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    Online_Judge();</span></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">l[i]=read(),r[i]=read();</span><br><span class="line">lll[l[i]]++;</span><br><span class="line">rr[r[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        lll[i]+=lll[i<span class="number">-1</span>];</span><br><span class="line">rr[i]+=rr[i<span class="number">-1</span>];</span><br><span class="line"><span class="comment">//统计区间放置 1 数量前缀和</span></span><br><span class="line">f[i][<span class="number">0</span>]=f[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">rep(j,<span class="number">1</span>,i) f[i][j]=f[i<span class="number">-1</span>][j<span class="number">-1</span>]*(rr[i]-(j<span class="number">-1</span>))+f[i<span class="number">-1</span>][j],f[i][j]%=MOD;</span><br><span class="line"><span class="comment">//分别举出第 i 列放右区间 1 或不放右区间 1 时的方案数求和并取模</span></span><br><span class="line">rep(j,lll[i<span class="number">-1</span>],lll[i]<span class="number">-1</span>) rep(k,<span class="number">0</span>,i) f[i][k]=f[i][k]*(i-k-j),f[i][k]%=MOD;</span><br><span class="line"><span class="comment">//rep(j,lll[i-1],lll[i]-1) 表示左区间需要再放置 lll[ i ]-lll[ i-1 ] 个 1。</span></span><br><span class="line"><span class="comment">//乘上前 i 列共放 k 个右区间 1 时左区间 1 放置方案数并取模</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,f[m][n]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p>暂无</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划,DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【题解】[ZqlwMatt 原创题]青蛙 (zby)</title>
      <link href="/2018/09/25/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BZqlwMatt%20%E5%8E%9F%E5%88%9B%E9%A2%98%5D%E9%9D%92%E8%9B%99%20(zby)/"/>
      <url>/2018/09/25/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BZqlwMatt%20%E5%8E%9F%E5%88%9B%E9%A2%98%5D%E9%9D%92%E8%9B%99%20(zby)/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>ZBY 是一只青蛙！</p><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如果一只青蛙在 u (u&gt;1) 号荷叶，他会进行一步等概率的跳跃，从 u 号荷叶跳到 1…u 号荷叶。</p><p>现在青蛙在 N 号荷叶，求出他跳到 1 号荷叶的期望步数。</p><a id="more"></a><hr><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>一个正整数 N 。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>答案保留 8 位小数。</p><hr><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h4><pre><code>2</code></pre><h4 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h4><pre><code>2.00000000</code></pre><h4 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例#2："></a>输入样例#2：</h4><pre><code>3</code></pre><h4 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例#2："></a>输出样例#2：</h4><pre><code>2.50000000</code></pre><hr><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>第一组数据中，三块碎片两两吻合的方案有 1 种，三块碎片中恰好有一对碎片互相吻合的<br>方案有 3 种，总共有 4 种方案。</p><p>第二组数据中，因为第 1、2 块碎片吻合，第 1、3 块碎片冲突，所以第 2、3 块碎片一定<br>冲突。</p><hr><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>对于 10% 的数据，N ≤ 5</p><p>对于 20% 的数据，N ≤ 10000</p><p>对于 30% 的数据，N ≤ 1000000</p><p>对于 100% 的数据，2 ≤ N ≤ 10^18</p><hr><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><del>因为青蛙是 zby，所以</del><br><del>if(n==1) puts(“0.00000000”);</del><br><del>else puts(“1.00000000”);</del><br>zbytql!!</p><p>感谢北冥咸鱼的倾情讲解。</p><p>用 f [ i ] 表示第 i 格到第 1 格的数学期望<br><img src="https://s1.ax1x.com/2018/09/25/iKqT2V.png" alt="iKqT2V.png"></p><p>理解一下，然后变形</p><p><img src="https://s1.ax1x.com/2018/09/25/iKqqrF.png" alt="iKqqrF.png"></p><p>于是可得</p><p><img src="https://s1.ax1x.com/2018/09/25/iKqLb4.png" alt="iKqLb4.png"></p><p>两式相减</p><p><img src="https://s1.ax1x.com/2018/09/25/iKqja9.png" alt="iKqja9.png"></p><p>就这样得出了优秀的 O( n ) 推导式</p><p><img src="https://s1.ax1x.com/2018/09/25/iKqzP1.png" alt="iKqzP1.png"></p><p>算下调和级数前缀和就知道啦！</p><p>就在欣喜之时，我悄咪咪地瞄到了数据范围</p><p>…</p><p><a href="https://baike.baidu.com/item/%E8%B0%83%E5%92%8C%E7%BA%A7%E6%95%B0/8019971?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E8%B0%83%E5%92%8C%E7%BA%A7%E6%95%B0/8019971?fr=aladdin</a></p><p>至于为什么较小的点需要用 O( n ) 递推，因为调和级数前缀和公式是无限逼近的…越大的数误差越小，对于 8 位的精度还是稍微保险一点，那个欧拉常数也可以通过暴算打表推出来</p><p>嗯，大概就是这样了</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(re i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>;<span class="keyword">bool</span> f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) f^=!(ch^<span class="string">'-'</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=((x+(x&lt;&lt;<span class="number">2</span>))&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line">ll n;</span><br><span class="line"><span class="keyword">double</span> f[<span class="number">4000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1000000</span>)&#123;</span><br><span class="line">        f[n]=f[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">        rep(i,<span class="number">2</span>,n<span class="number">-1</span>) f[n]+=<span class="number">1.0</span>/i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.8lf\n"</span>,f[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.8lf\n"</span>,<span class="built_in">log</span>(n)+<span class="number">1.5772156649</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.org/problemnew/show/U39825" target="_blank" rel="noopener">洛谷 U39825 青蛙 (zby)</a></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论,数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【题解】[NOIP模拟 9.17]灰狼呼唤着同胞</title>
      <link href="/2018/09/20/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BNOIP%E6%A8%A1%E6%8B%9F%209.17%5D%E7%81%B0%E7%8B%BC%E5%91%BC%E5%94%A4%E7%9D%80%E5%90%8C%E8%83%9E/"/>
      <url>/2018/09/20/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BNOIP%E6%A8%A1%E6%8B%9F%209.17%5D%E7%81%B0%E7%8B%BC%E5%91%BC%E5%94%A4%E7%9D%80%E5%90%8C%E8%83%9E/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>诈尸了…这题比较 <del>容易口胡</del> 有意思，所以…</p><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>我的母亲柯蒂丽亚，是一个舞者。身披罗纱，一身异国装扮的她，来自灰狼的村子。</p><p>曾经在灰狼村子担任女侍的她，被认定在某晚犯下可怕的罪行之后，被赶出了村子。</p><p>一切的元凶，都要回到母亲犯下重罪的那一晚。</p><a id="more"></a><p>我不认为柯蒂丽亚有犯罪。</p><p>二十年前的混沌，一共有n块碎片。</p><p>这n块碎片曾经<strong>两两之间都有联系</strong>，可是很多联系都在时间的洪流中消失了。</p><p>现在，我只能确定其中 m 条联系的种类。</p><p>每条联系都是一条<strong>无向边</strong>，<strong>任意两块碎片之间至多有一条联系，没有联系会连接在同一块碎片的两端。</strong></p><p>联系有两种。一种是冲突，用0表示；另一种是吻合，用1表示。</p><p>虽然已经过去了二十年，但是联系的种类是不会变的。</p><p>现在，我想要用这 m 条联系，去推断二十年前的 n(n-1)/2 条联系的种类。</p><p>如果我推理出所有联系的种类，那么我就可以将混沌言语化，证明柯蒂丽亚的清白。</p><p>在灰狼的村子，我得知了推理的唯一条件：</p><p><strong>二十年前，对于任意三块互不相同的碎片，要么这三块碎片两两吻合，要么恰好有一对碎片互相吻合。</strong></p><p>我想要知道，二十年前n块碎片两两之间的联系，可能有多少种。</p><p>你只要输出方案数模 998244353 之后的结果。如果已经确定的m条联系不符合上述条件，请输出 0。</p><p>两种方案不同，当且仅当存在两块碎片，在一种方案中冲突，在另一种方案中吻合。也就是说，你要求的是有多少种可能的原图。</p><hr><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行两个整数 Test,T，Test 表示测试点的编号，T 表示数据的组数。保证 T≤3。</p><p>接下来 T 组数据，每组数据第一行两个整数 n,m，</p><p>接下来 m 行，每行三个整数 u,v,t，表示第 u 块碎片和第 v 块碎片之间联系的种类为 t。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>共T行，每行一个整数，表示方案数对 998244353 取模后的结果。</p><hr><h3 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h3><pre><code>0 23 04 21 2 11 3 0</code></pre><h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><pre><code>42</code></pre><hr><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>第一组数据中，三块碎片两两吻合的方案有 1 种，三块碎片中恰好有一对碎片互相吻合的<br>方案有 3 种，总共有 4 种方案。</p><p>第二组数据中，因为第 1、2 块碎片吻合，第 1、3 块碎片冲突，所以第 2、3 块碎片一定<br>冲突。</p><hr><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先按题意建边并分类标号，若不合法，则标记退出。统计连通块个数。<br><strong>将点染色。</strong><br>只要确定任意连通块内的任意一点，那个连通块内所有点都将被确定（敌人的敌人就是朋友）。<br>即所有点都将被染成黑白两色。<br>这个连通块与另一个连通块间的连边种类（冲突 or 吻合），将确定另一个连通块的所有点的颜色。<br>以此类推，<br>最后两个连通块间的边将由点的颜色确定，即<strong>连边方案数为 2 ^ (连通块个数 - 1)</strong>。<br>得出答案。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(re i=a;i&gt;=b;--i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>;<span class="keyword">bool</span> f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) f^=!(ch^<span class="string">'-'</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=((x+(x&lt;&lt;<span class="number">2</span>))&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> f?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Online_Judge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">        freopen(<span class="string">"brethren.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        freopen(<span class="string">"brethren.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line">ll Test,T;</span><br><span class="line">ll head[<span class="number">100050</span>],to[<span class="number">2000050</span>],nxt[<span class="number">2000050</span>],cnt,ans;</span><br><span class="line"><span class="keyword">bool</span> f[<span class="number">2000050</span>],vis[<span class="number">100050</span>],color[<span class="number">100050</span>],rflag;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v,<span class="keyword">bool</span> flag)</span></span>&#123;</span><br><span class="line">    to[++cnt]=v;</span><br><span class="line">    nxt[cnt]=head[u];</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">    f[cnt]=flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=head[x];i;i=nxt[i])&#123;</span><br><span class="line">        ll too=to[i];</span><br><span class="line">        <span class="keyword">if</span>(vis[too]==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[i]==<span class="number">0</span> <span class="keyword">and</span> color[x]==color[too]) rflag=<span class="number">1</span>;<span class="comment">//判合法操作</span></span><br><span class="line">            <span class="keyword">if</span>(f[i]==<span class="number">1</span> <span class="keyword">and</span> color[x]!=color[too]) rflag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[i]==<span class="number">0</span>) color[x]==<span class="number">1</span>?color[too]=<span class="number">0</span>:color[too]=<span class="number">1</span>;<span class="comment">//染色操作</span></span><br><span class="line">            <span class="keyword">if</span>(f[i]==<span class="number">1</span>) color[x]==<span class="number">1</span>?color[too]=<span class="number">1</span>:color[too]=<span class="number">0</span>;</span><br><span class="line">            dfs(too);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    Online_Judge();</span></span><br><span class="line">    Test=read(),T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">        <span class="built_in">memset</span>(to,<span class="number">0</span>,<span class="keyword">sizeof</span> to);</span><br><span class="line">        <span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="keyword">sizeof</span> nxt);</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="keyword">sizeof</span> color);<span class="comment">//咳咳</span></span><br><span class="line">        cnt=<span class="number">0</span>,ans=<span class="number">0</span>,rflag=<span class="number">0</span>;</span><br><span class="line">        ll n=read(),m=read();</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            ll u=read(),v=read();</span><br><span class="line">            <span class="keyword">bool</span> t;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">            addedge(u,v,t);</span><br><span class="line">            addedge(v,u,t);</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ans++;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rflag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll anss=<span class="number">1</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,ans<span class="number">-1</span>)&#123;</span><br><span class="line">            anss&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">            anss%=<span class="number">998244353</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,anss);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="http://cxslzx.hustoj.com/problem.php?id=1501" target="_blank" rel="noopener">cxslzxOJ 1501 灰狼呼唤着同胞（常州2017提高day6第2题）</a></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【杂谈】初中毕业祭</title>
      <link href="/2018/06/19/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E5%88%9D%E4%B8%AD%E6%AF%95%E4%B8%9A%E7%A5%AD/"/>
      <url>/2018/06/19/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91%E5%88%9D%E4%B8%AD%E6%AF%95%E4%B8%9A%E7%A5%AD/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>好久没更新博客了呢…<br>入坑OI半年多了，又要回校要开始暑假的集训了<br>初中就这样结束了呀<br><a id="more"></a><br>中考结束也就不再是初中生了<br>世界杯也没时间看了吧？<br>心情复杂<br>对了这里记下吧我参加(guan)过 ZJOI2018 和 JSOI2018<br>因为当时没有博客，就没有写游记wa…<br>嗯…想把每场比赛都记录下来</p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>【题解】[SCOI2011]糖果</title>
      <link href="/2018/05/27/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BSCOI2011%5D%E7%B3%96%E6%9E%9C/"/>
      <url>/2018/05/27/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BSCOI2011%5D%E7%B3%96%E6%9E%9C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>幼儿园里有N个小朋友，lxhgww老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不希望小红分到的糖果比他的多，于是在分配糖果的时候，lxhgww需要满足小朋友们的K个要求。幼儿园的糖果总是有限的，lxhgww想知道他至少需要准备多少个糖果，才能使得每个小朋友都能够分到糖果，并且满足小朋友们所有的要求。</p><hr><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入的第一行是两个整数N，K。</p><p>接下来K行，表示这些点需要满足的关系，每行3个数字，X，A，B。</p><p>如果X=1， 表示第A个小朋友分到的糖果必须和第B个小朋友分到的糖果一样多；</p><a id="more"></a><p>如果X=2， 表示第A个小朋友分到的糖果必须少于第B个小朋友分到的糖果；</p><p>如果X=3， 表示第A个小朋友分到的糖果必须不少于第B个小朋友分到的糖果；</p><p>如果X=4， 表示第A个小朋友分到的糖果必须多于第B个小朋友分到的糖果；</p><p>如果X=5， 表示第A个小朋友分到的糖果必须不多于第B个小朋友分到的糖果；</p><hr><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出一行，表示lxhgww老师至少需要准备的糖果数，如果不能满足小朋友们的所有要求，就输出-1。</p><hr><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>5 71 1 22 3 24 4 13 4 55 4 52 3 54 5 1</code></pre><hr><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>11</p><hr><h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>【数据范围】<br>对于30%的数据，保证 N&lt;=100<br>对于100%的数据，保证 N&lt;=100000<br>对于所有的数据，保证 K&lt;=100000，1&lt;=X&lt;=5，1&lt;=A, B&lt;=N</p><hr><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>差分约束裸题，保证博客标签多样性，维护生态平衡<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head[N&lt;&lt;<span class="number">2</span>],nxt[N&lt;&lt;<span class="number">2</span>],to[N&lt;&lt;<span class="number">2</span>],val[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> vis[N],sum[N],used[N];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll f=<span class="number">1</span>,x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span> <span class="keyword">or</span> ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> <span class="keyword">and</span> ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    to[++cnt]=y;</span><br><span class="line">    nxt[cnt]=head[x];</span><br><span class="line">    head[x]=cnt;</span><br><span class="line">    val[cnt]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        vis[u]=<span class="number">0</span>;q.pop();</span><br><span class="line">        <span class="keyword">for</span>(re i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span>(sum[v]&lt;sum[u]+val[i])&#123;</span><br><span class="line">                sum[v]=sum[u]+val[i];</span><br><span class="line">                used[v]++;</span><br><span class="line">                <span class="keyword">if</span>(used[v]&gt;n)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                    vis[v]=<span class="number">1</span>,q.push(v); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();k=read();</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt,a,b;</span><br><span class="line">        opt=read(),a=read(),b=read();</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                add(a,b,<span class="number">0</span>);</span><br><span class="line">                add(b,a,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add(a,b,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                add(b,a,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add(b,a,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                add(a,b,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">        vis[i]=<span class="number">1</span>,sum[i]=<span class="number">1</span>,q.push(i);</span><br><span class="line">    <span class="keyword">if</span>(!spfa())&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">        ans+=sum[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>都是标准操作，就不注释了（逃</p><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2330" target="_blank" rel="noopener">BZOJ 2330 [SCOI2011]糖果</a></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPFA </tag>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【题解】[JSOI2004]平衡点 / 吊打XXX</title>
      <link href="/2018/05/24/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BJSOI2004%5D%E5%B9%B3%E8%A1%A1%E7%82%B9%20%E5%90%8A%E6%89%93XXX/"/>
      <url>/2018/05/24/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5BJSOI2004%5D%E5%B9%B3%E8%A1%A1%E7%82%B9%20%E5%90%8A%E6%89%93XXX/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如图：有 n 个重物，每个重物系在一条足够长的绳子上。每条绳子自上而下穿过桌面上的洞，然后系在一起。图中 X 处就是公共的绳结。假设绳子是完全弹性的（不会造成能量损失），桌子足够高（因而重物不会垂到地上），且忽略所有的摩擦。</p><p>问绳结 X 最终平衡于何处。</p><p>注意：桌面上的洞都比绳结 X 小得多，所以即使某个重物特别重，绳结 X 也不可能穿过桌面上的洞掉下来，最多是卡在某个洞口处。</p><p><img src="https://s1.ax1x.com/2018/05/24/CWaxdf.jpg" alt="CWaxdf.jpg"></p><a id="more"></a><hr><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>文件的第一行为一个正整数 n（ 1 ≤ n ≤ 1000 ），表示重物和洞的数目。接下来的 n 行，每行是3个整数：Xi . Yi . Wi，分别表示第 i 个洞的坐标以及第 i 个重物的重量。( -10000 ≤ x , y ≤ 10000, 0 &lt; w ≤ 1000 )</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>你的程序必须输出两个浮点数（保留小数点后三位），分别表示处于最终平衡状态时绳结 X 的横坐标和纵坐标。两个数以一个空格隔开。</p><hr><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h4><pre><code>30 0 10 2 11 1 1</code></pre><h4 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h4><pre><code>0.577 1.000</code></pre><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道物理题的正解才不是退火！！！<br>但是呢，退火是一种玄学的算法，也没有什么模板之说，这道题因其特殊性被很多人当作是退火的入门题。</p><p>退火算法的思路其实并不难，就是模拟物理的退火过程，包括：</p><blockquote><ol><li>加温过程</li><li>等温过程</li><li>冷却过程</li></ol></blockquote><p>设个初始温度变量 t 作为随机取值范围，t 的值随着步骤的进行逐渐减小，从局部最优解着手，在 t 的范围内进行随机取点，若此点更优，则从原点跳到此点，若原点更优，则以一定几率跳到此点（为了跳出局部最优），模拟退火成功率的大小关键在于参数的选取，这需要大量的经验积累（蒟蒻我显然毫无经验）。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>若是发现本代码成功率较低（总是 WA 掉），<del>那是血统问题</del>，你可以多进行几次退火（注意 BZOJ 可能会 T 掉）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span> <span class="keyword">or</span> ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> <span class="keyword">and</span> ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,w;</span><br><span class="line">&#125;node[<span class="number">10050</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">double</span> de_x=x-node[i].x;</span><br><span class="line">        <span class="keyword">double</span> de_y=y-node[i].y;</span><br><span class="line">        ans+=(<span class="built_in">sqrt</span>(de_x*de_x+de_y*de_y))*node[i].w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ansx,ansy;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">1e18</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> delta=<span class="number">0.993</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">SA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x=ansx,y=ansy,t=<span class="number">192600</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&gt;<span class="number">1e-14</span>)&#123;</span><br><span class="line">        <span class="keyword">double</span> tox=ansx+(rand()*<span class="number">2</span>-RAND_MAX)*t;</span><br><span class="line">        <span class="keyword">double</span> toy=ansy+(rand()*<span class="number">2</span>-RAND_MAX)*t;</span><br><span class="line">        <span class="keyword">double</span> del=sum(tox,toy)-ans;</span><br><span class="line">        <span class="keyword">if</span>(del&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            x=tox;</span><br><span class="line">            y=toy;</span><br><span class="line">            ansx=x;</span><br><span class="line">            ansy=y;</span><br><span class="line">            ans=sum(tox,toy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-del/t)*RAND_MAX&gt;rand())&#123;</span><br><span class="line">            x=ansx;</span><br><span class="line">            y=ansy;</span><br><span class="line">        &#125;</span><br><span class="line">        t*=delta;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        node[i].x=read();</span><br><span class="line">        node[i].y=read();</span><br><span class="line">        node[i].w=read();</span><br><span class="line">    &#125;</span><br><span class="line">    SA();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3lf %.3lf\n"</span>,ansx,ansy);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.org/problemnew/show/P1337" target="_blank" rel="noopener">洛谷 P1337 [JSOI2004]平衡点 / 吊打XXX</a>（题目描述清楚）<br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3680" target="_blank" rel="noopener">BZOJ 3680 吊打XXX</a>（数据较强）</p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【题解】[洛谷 P4514]上帝造题的七分钟</title>
      <link href="/2018/05/22/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5B%E6%B4%9B%E8%B0%B7%20P4514%5D%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F/"/>
      <url>/2018/05/22/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91%5B%E6%B4%9B%E8%B0%B7%20P4514%5D%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>对树状数组不了解的同学戳这里 —&gt; <a href="https://vsh-fd.github.io/2018/05/21/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/" target="_blank" rel="noopener">【模板】树状数组</a></p><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p><strong>裸体就意味着身体。</strong></p><p>*tips:作为一道严肃题目的背景，这句话显然是非常重要的（<del>我总不能说吸引读者注意，激发读者阅读兴趣吧咳咳…</del>）<br><a id="more"></a></p><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>第一分钟，X说，要有矩阵，于是便有了一个里面写满了 0 的 n×m 矩阵。<br>第二分钟，L说，要能修改，于是便有了将左上角为 (a,b) ，右下角为 (c,d) 的一个矩形区域内的全部数字加上一个值的操作。<br>第三分钟，k说，要能查询，于是便有了求给定矩形区域内的全部数字和的操作。<br>第四分钟，彩虹喵说，要基于二叉树的数据结构，于是便有了数据范围。<br>第五分钟，和雪说，要有耐心，于是便有了时间限制。<br>第六分钟，吃钢琴男说，要省点事，于是便有了保证运算过程中及最终结果均不超过32位有符号整数类型的表示范围的限制。<br>第七分钟，这道题终于造完了，然而，造题的神牛们再也不想写这道题的程序了。<br>——《上帝造裸题的七分钟》<br>所以这个神圣的任务就交给你了。</p><hr><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入数据的第一行为X n m，代表矩阵大小为 n×m 。<br>从输入数据的第二行开始到文件尾的每一行会出现以下两种操作：</p><p>L a b c d delta —— 代表将以 (a,b),(c,d) 为顶点的矩形区域内的所有数字加上delta。<br>k a b c d —— 代表求以 (a,b),(c,d) 为顶点的矩形区域内所有数字的和。<br>请注意， k 为小写。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>针对每个 k 操作，在单独的一行输出答案。</p><hr><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h4><pre><code>X 4 4L 1 1 3 3 2L 2 2 4 4 1k 2 2 3 3</code></pre><h4 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h4><pre><code>12</code></pre><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>没有思路的，这就是一道二维树状数组（区间修改 + 区间查询）的裸题，题目卡二维线段树，所以还是好好写二维树状数组吧</p><p>什么？你不会二维树状数组？不(我)好意(懒)思(啊)，没看到这是题解（懒得写模板）吗…</p><p>本题主要考察二维树状数组的区间修改 + 区间查询（可以参考一维树状数组的类似做法）<br>别忘了，裸题就意味着神题</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll f=<span class="number">1</span>,x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&gt;<span class="string">'9'</span> <span class="keyword">or</span> ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> <span class="keyword">and</span> ch&lt;=<span class="string">'9'</span>)&#123;x=<span class="number">10</span>*x+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lowbit</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,d1[<span class="number">2100</span>][<span class="number">2100</span>],d2[<span class="number">2100</span>][<span class="number">2100</span>],d3[<span class="number">2100</span>][<span class="number">2100</span>],d4[<span class="number">2100</span>][<span class="number">2100</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sum_add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=lowbit(i))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=m;j+=lowbit(j))&#123;</span><br><span class="line">d1[i][j]+=z;</span><br><span class="line">d2[i][j]+=z*x;</span><br><span class="line">d3[i][j]+=z*y;</span><br><span class="line">d4[i][j]+=z*x*y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">int</span> z)</span></span>&#123;   <span class="comment">//区间修改（只需要修改四个点）</span></span><br><span class="line">sum_add(xa,ya,z);</span><br><span class="line">sum_add(xa,yb+<span class="number">1</span>,-z);</span><br><span class="line">sum_add(xb+<span class="number">1</span>,ya,-z);</span><br><span class="line">sum_add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sum_ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;        <span class="comment">//(1,1)与(x,y)的区间和（二维前缀和）</span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i))</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=y;j;j-=lowbit(j))&#123;</span><br><span class="line">ans +=(x+<span class="number">1</span>)*(y+<span class="number">1</span>)*d1[i][j]</span><br><span class="line">- (y+<span class="number">1</span>)*d2[i][j]</span><br><span class="line">- (x+<span class="number">1</span>)*d3[i][j]</span><br><span class="line">+ d4[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span>&#123;      <span class="comment">//区间查询</span></span><br><span class="line"><span class="keyword">return</span> sum_ask(xb,yb)-sum_ask(xb,ya<span class="number">-1</span>)-sum_ask(xa<span class="number">-1</span>,yb)+sum_ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> opt[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"X%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;opt))&#123;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'L'</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> xa,ya,xb,yb,z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;xa,&amp;ya,&amp;xb,&amp;yb,&amp;z);</span><br><span class="line">range_add(xa,ya,xb,yb,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">'k'</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> xa,ya,xb,yb;</span><br><span class="line">xa=read(),ya=read(),xb=read(),yb=read();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,range_ask(xa,ya,xb,yb));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.org/problemnew/show/P4514" target="_blank" rel="noopener">洛谷 P4514 上帝造题的七分钟</a></p>]]></content>
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【学习笔记】树状数组</title>
      <link href="/2018/05/21/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2018/05/21/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>感觉是个好大的坑wa…我就简略地写写好了…其实树状数组在大部分时候仅作为线段树的替代品（执行的基本操作相似，且代码简单易懂，时空复杂度均低于线段树），那那那为什么需要线段树呢？树状数组的适用范围小啊（很小很小啊）执行基本修改查询操作已经很不错了还苛求什么呢…</p><h2 id="概念与基本性质"><a href="#概念与基本性质" class="headerlink" title="概念与基本性质"></a>概念与基本性质</h2><blockquote><p>树状数组(Binary Indexed Tree(B.I.T), Fenwick Tree)是一个查询和修改复杂度都为log(n)的数据结构。主要用于查询任意两位之间的所有元素之和，但是每次只能修改一个元素的值；经过简单修改可以在log(n)的复杂度下进行范围修改，但是这时只能查询其中一个元素的值(如果加入多个辅助数组则可以实现区间修改与区间查询)。</p></blockquote><a id="more"></a><p>——以上内容摘自百度百科</p><p>举个栗子：<br>设原数组为A，树状数组为C，则</p><blockquote><p>C1 = A1<br>C2 = A1 + A2<br>C3 = A3<br>C4 = A1 + A2 + A3 + A4<br>C5 = A5<br>C6 = A5 + A6<br>C7 = A7<br>C8 = A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8<br>…<br>C16 = A1 + A2 + A3 + A4 + A5 + A6 + A7 + A8 + A9 + A10 + A11 + A12 + A13 + A14 + A15 + A16</p></blockquote><p>观察下图：</p><p><img src="https://s1.ax1x.com/2018/05/20/Cg8RqH.png" alt="Cg8RqH.png"></p><p>我们可以发现，i 号节点管辖的范围是 2 ^ k（k 是 i 的二进制末尾 0 的个数），区间最后一个元素必然是 Ai<br>显然，Cn=A(n – 2 ^ k + 1) + … + An</p><p>那么，问题来了：<br>如何求出 2 ^ k 的值呢？</p><p>这时需要引进一个特殊的函数 lowbit( )…lowb…it..（ 卡在奇怪的地方.jpg ）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数 <del>巧妙</del> 地利用了机器补码的特性，计算出了 x 二进制最低位 1 所代表的值，即 2 ^ k 的值。</p><p>然后我们就可以借助它 <del>偷税</del> 愉悦地完成接下来的操作了！！</p><hr><h2 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h2><h3 id="单点修改，区间查询"><a href="#单点修改，区间查询" class="headerlink" title="单点修改，区间查询"></a>单点修改，区间查询</h3><p>最基础的树状数组</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> n,m,t[<span class="number">2000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll f=<span class="number">1</span>,x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span> <span class="keyword">or</span> ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span> <span class="keyword">and</span> ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;      <span class="comment">//x 二进制最低位 1 所对应的值</span></span><br><span class="line">    <span class="keyword">return</span> x &amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;       <span class="comment">//单点修改</span></span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">        t[x]+=k;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;       <span class="comment">//前缀和</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ans+=t[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;      <span class="comment">//区间查询</span></span><br><span class="line">    <span class="keyword">return</span> sum(r)-sum(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        x=read();</span><br><span class="line">        add(i,x);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt,l,r;</span><br><span class="line">        opt=read(),l=read(),r=read();</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                add(l,r);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ask(l,r));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://www.luogu.org/problemnew/show/P3374" target="_blank" rel="noopener">洛谷 P3374 【模板】树状数组 1</a></p><h3 id="区间修改，单点查询"><a href="#区间修改，单点查询" class="headerlink" title="区间修改，单点查询"></a>区间修改，单点查询</h3><p>其实树状数组本身并不支持区间修改，但是运用 <del>人类智慧</del> 我们可以发现通过差分数组（d[ i ] = a[ i ] - a[ i - 1 ] , a[ 0 ] = 0）可以将问题转换为<strong>单点修改，区间查询</strong></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll f=<span class="number">1</span>,x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span> <span class="keyword">or</span> ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> <span class="keyword">and</span> ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line">ll t[<span class="number">500050</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">        t[x]+=k;</span><br><span class="line">        x+=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">val</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        ans+=t[x];</span><br><span class="line">        x-=lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//看起来和上一种操作没什么不同啊</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read(),m=read();</span><br><span class="line">    ll now,tmp=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        now=read();</span><br><span class="line">        add(i,now-tmp);      <span class="comment">//重点在这，每次存的数都是差分后的</span></span><br><span class="line">        tmp=now;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt;</span><br><span class="line">        opt=read();</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">int</span> x,y,k;</span><br><span class="line">                x=read(),y=read(),k=read();</span><br><span class="line">                add(x,k);</span><br><span class="line">                add(y+<span class="number">1</span>,-k);         <span class="comment">//只需修改区间两端（中间差值不变）</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">int</span> z;</span><br><span class="line">                z=read();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,val(z));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p><a href="https://www.luogu.org/problemnew/show/P3368" target="_blank" rel="noopener">洛谷 P3368 【模板】树状数组 2</a></p><h3 id="区间修改，区间查询"><a href="#区间修改，区间查询" class="headerlink" title="区间修改，区间查询"></a>区间修改，区间查询</h3><p>这是树状数组最常用的操作，也是用线段树最难打的（怕是常用的原因）<br>我们参考<strong>区间修改，单点查询</strong>的操作，只要求出val()函数的前缀和，就可以实现复杂度为 O( log n )的区间查询了</p><p>设原数组为 a，d 为 a 的差分数组，欲求 a 的前缀和</p><blockquote><p>a[ 1 ] + a[ 2 ] + a[ 3 ] + … + a[ n ]<br>= (d[ 1 ]) + (d[ 1 ] + d[ 2 ]) + (d[ 1 ] + d[ 2 ] + d[ 3 ]) + … +(d[ 1 ] + d[ 2 ] + … + d[ n ])<br>= d[ 1 ] · n + d[ 2 ] · (n - 1) + … +d[ n ]<br>= n · (d[ 1 ] + d[ 2 ] + … +d[ n ]) - (0 · d[ 1 ] + 1 · d[ 2 ] + … + (n - 1) · d[ n ])</p></blockquote><p>所以我们还要再维护一个 d2，使 d2[ i ] = (i - 1) · d[ i ]，每当修改 d 时就修改一下 d2，复杂度就不会改变</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>就不用什么注释了…吧？<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll i,j,n,m,a[<span class="number">200050</span>],c[<span class="number">200050</span>],c2[<span class="number">200050</span>],x,l,r,w,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll f=<span class="number">1</span>,x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span> <span class="keyword">or</span> ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> <span class="keyword">and</span> ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lowbit</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=n;x=x+lowbit(x))</span><br><span class="line">        c[x]=c[x]+w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add2</span><span class="params">(ll x,ll w)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=n;x=x+lowbit(x))</span><br><span class="line">        c2[x]=c2[x]+w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">val</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x&gt;<span class="number">0</span>;x=x-lowbit(x))</span><br><span class="line">        ans=ans+c[x];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">val2</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x&gt;<span class="number">0</span>;x=x-lowbit(x))</span><br><span class="line">        ans=ans+c2[x];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        add(i,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">        add2(i,(i<span class="number">-1</span>)*(a[i]-a[i<span class="number">-1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    m=read();</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        x=read();</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">            l=read(),r=read(),w=read();</span><br><span class="line">            add(l,w);</span><br><span class="line">            add(r+<span class="number">1</span>,-w);</span><br><span class="line">            add2(l,w*(l<span class="number">-1</span>));</span><br><span class="line">            add2(r+<span class="number">1</span>,-w*r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            l=read(),r=read();</span><br><span class="line">            ans=r*val(r)-val2(r);</span><br><span class="line">            ans=ans-((l<span class="number">-1</span>)*val(l<span class="number">-1</span>)-val2(l<span class="number">-1</span>));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><p><a href="http://codevs.cn/problem/1082/" target="_blank" rel="noopener">CodeVS 1082 线段树练习 3</a><br>为什么难度是大师啊喂</p><hr><h2 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h2><p>当然，树状数组这么有用（代码量小）的数据结构，怎么会少了矩阵呢？<del>为什么我要新开一个标题啊…</del></p><p>在一维树状数组中，tree[ x ] 记录的是右端点为 x、长度为 lowbit( x ) 的区间的区间和。<br>那么在二维树状数组中，可以类似地定义 tree[ x ][ y ] 记录的是右下角为 (x, y)，高为 lowbit( x ), 宽为 lowbit( y ) 的区间的区间和。</p><p>嘛，具体操作什么的（我好懒啊）前两种很好懂啊… <del>自己找度娘吧</del><br>至于区间修改 + 区间查询，可以参考我写的 <a href="https://vsh-fd.github.io/2018/05/22/%E3%80%90%E9%A2%98%E8%A7%A3%E3%80%91[%E6%B4%9B%E8%B0%B7%20P4514]%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F/" target="_blank" rel="noopener">【题解】上帝造题的七分钟（二维树状数组）</a></p><p>那…就写到这吧。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【学习笔记】左偏树（可并堆）</title>
      <link href="/2018/05/16/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
      <url>/2018/05/16/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%B7%A6%E5%81%8F%E6%A0%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="概念与基本性质"><a href="#概念与基本性质" class="headerlink" title="概念与基本性质"></a>概念与基本性质</h3><blockquote><p>左偏树(Leftist Tree)是一种可并堆的实现，是具有左偏性质的堆有序二叉树</p></blockquote><ul><li><p>可并堆(Mergeable Heap)是一种抽象数据类型，它除了支持优先队列的三个基本操作(Insert, Minimum,Delete-Min)，还支持一个额外的操作——合并操作。</p></li><li><p>左偏性质是为了使我们可以以更小的代价在优先队列的其它两个基本操作（插入节点、删除最小节点）进行后维持堆性质。</p></li></ul><blockquote><p>左偏树是一棵二叉树，它的节点除了和二叉树的节点一样具有左右子树指针(left, right)外，还有两个属性，键值(key)和距离(dist)<br>节点的键值小于或等于它的左右子节点的键值（小根）<br>节点的左子节点的距离不小于右子节点的距离（左偏性质）<br>节点的距离等于它的右子节点的距离加1</p></blockquote><a id="more"></a><hr><h3 id="执行操作"><a href="#执行操作" class="headerlink" title="执行操作"></a>执行操作</h3><blockquote><ol><li>合并 - merge</li><li>查询堆最小值 - find</li><li>删除（并于查询） - erase</li></ol></blockquote><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">101000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Leftist</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lch,rch,key,fa,dist;</span><br><span class="line">&#125;h[N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span> <span class="keyword">or</span> ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> <span class="keyword">and</span> ch&lt;=<span class="string">'9'</span>)&#123;x=<span class="number">10</span>*x+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;<span class="keyword">int</span> tmp=x;x=y;y=tmp;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;       <span class="comment">//合并操作</span></span><br><span class="line"><span class="keyword">if</span>(!u <span class="keyword">or</span> !v) <span class="keyword">return</span> u+v;</span><br><span class="line"><span class="keyword">if</span>(h[u].key&gt;h[v].key <span class="keyword">or</span> (h[u].key==h[v].key <span class="keyword">and</span> u&gt;v)) swap(u,v);</span><br><span class="line"><span class="keyword">int</span> &amp;ul=h[u].lch,&amp;ur=h[u].rch;</span><br><span class="line">ur=merge(ur,v);</span><br><span class="line">h[ur].fa=u;</span><br><span class="line"><span class="keyword">if</span>(h[ul].dist&lt;h[ur].dist) swap(ul,ur);</span><br><span class="line">h[u].dist=h[ur].dist+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;     <span class="comment">//删除操作</span></span><br><span class="line"><span class="keyword">int</span> ul=h[u].lch,ur=h[u].rch;</span><br><span class="line">h[u].key=<span class="number">-1</span>;h[ul].fa=<span class="number">0</span>;h[ur].fa=<span class="number">0</span>;</span><br><span class="line">merge(ul,ur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;         <span class="comment">//查询操作</span></span><br><span class="line"><span class="keyword">return</span> h[x].fa?find(h[x].fa):x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">h[<span class="number">0</span>].dist=<span class="number">-1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)</span><br><span class="line">h[i].key=read();</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> opt,x,y;</span><br><span class="line">opt=read(),x=read();</span><br><span class="line"><span class="keyword">switch</span>(opt)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">y=read();</span><br><span class="line"><span class="keyword">if</span>(h[x].key!=<span class="number">-1</span> &amp;&amp; h[y].key!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> p=find(x),q=find(y);</span><br><span class="line"><span class="keyword">if</span>(p!=q) merge(p,q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line"><span class="keyword">if</span>(h[x].key==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=find(x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,h[p].key);</span><br><span class="line">erase(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.org/problemnew/show/P3377" target="_blank" rel="noopener">洛谷 P3377 【模板】左偏树（可并堆）</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 左偏树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【学习笔记】莫队算法</title>
      <link href="/2018/05/11/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
      <url>/2018/05/11/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h3><p><del>莫队算法，简单说就是基于分块进行暴力</del></p><blockquote><p>莫队算法，是由前国家队队长莫涛在役时创造的，为数不多几种在役选手在比赛或平时训练中创造并广为流传使用的算法之一。</p></blockquote><p>此算法在OI界具有极高的人气，据说能解决一切区间处理问题，<del>当然我这种蒟蒻却只能板子题做做</del>，让我们通过下面的题目简单了解一下莫队算法。<br><a id="more"></a></p><hr><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>有 n 个物品，分属于不同的类别，给出m个区间，求在各个区间中连续两次取出相同类别的物品的概率，最简分数表示，若概率为0则输出0/1。（n,m&lt;=50000）</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先，我们需要两个指针 l 和 r 来指示当前区间的位置，用 sum[ ] 数组存放当前区间各类别数量，ans 为区间结果，ans 的分母是所有的组合数 (r - l + 1) (r - l)，而分子是各个类别的sum[ ]的平方的累加和，根据其中任意一个区间的 ans 求出相邻区间的 ans。</p><blockquote><p>这里相邻区间定义为当前区间的 l - 1 或 l + 1 或 r - 1 或 r + 1<br>以 l + 1 为例，如下图：<br><img src="https://s1.ax1x.com/2018/05/11/C0oiGD.png" alt="C0oiGD.png"><br>我们将 l + 1,此时 sum[green] - 1，区间总数也 - 1，这时你会发现改变一次的时间复杂度竟然是O( 1 )？！<br>其他的改变也是同理</p></blockquote><p>当然这样是远远不够的，若是逐个区间暴力枚举，复杂度是O( n ^ 2 )，太高了呀<br>这时需要引入变量 unit = sqrt( n )，用它来进行分块（将 n 分为 sqrt( n ) 个区域），并用 ad[ i ] 来存储 i 所在的区间，这样，进行指针跳动时，最多只需要 2 * sqrt( n ) 次就能到达目标，大大优于之前的 n 次。</p><p>最后再次致敬莫涛大神！！</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 50050</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll m,ll n)</span></span>&#123;<span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;ll c=n%m;n=m;m=c;&#125;<span class="keyword">return</span> n;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">pow2</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mo</span>&#123;</span>ll l,r,cnt;ll A,B;&#125;ask[MAXN];   <span class="comment">//存储区间信息</span></span><br><span class="line"><span class="comment">//A,B分别存储结果的分子和分母</span></span><br><span class="line">ll n,m,col[MAXN],unit,ad[MAXN];</span><br><span class="line">ll sum[MAXN],ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(Mo a,Mo b)</span></span>&#123;    <span class="comment">//优化时间复杂度</span></span><br><span class="line"><span class="keyword">return</span> ad[a.l]==ad[b.l]?a.r&lt;b.r:a.l&lt;b.l;</span><br><span class="line">&#125;       <span class="comment">//左指针为第一关键字</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(Mo a,Mo b)</span></span>&#123;<span class="keyword">return</span> a.cnt&lt;b.cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">revise</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> add)</span></span>&#123;     <span class="comment">//每次改变并维护ans和sum[ ]</span></span><br><span class="line">ans-=pow2(sum[col[x]]);</span><br><span class="line">sum[col[x]]+=add;</span><br><span class="line">ans+=pow2(sum[col[x]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=read(),m=read();</span><br><span class="line">unit=<span class="built_in">sqrt</span>(n);</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">col[i]=read();</span><br><span class="line">ad[i]=i/unit+<span class="number">1</span>;     <span class="comment">//分块</span></span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">ask[i].l=read(),ask[i].r=read();</span><br><span class="line">ask[i].cnt=i;          <span class="comment">//记录原顺序</span></span><br><span class="line">&#125;</span><br><span class="line">sort(ask+<span class="number">1</span>,ask+m+<span class="number">1</span>,cmp1);     <span class="comment">//减少指针总变换次数</span></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;   <span class="comment">//执行操作</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;ask[i].l) revise(l,<span class="number">-1</span>),++l;</span><br><span class="line"><span class="keyword">while</span>(l&gt;ask[i].l) revise(l<span class="number">-1</span>,<span class="number">1</span>),--l;</span><br><span class="line"><span class="keyword">while</span>(r&lt;ask[i].r) revise(r+<span class="number">1</span>,<span class="number">1</span>),++r;</span><br><span class="line"><span class="keyword">while</span>(r&gt;ask[i].r) revise(r,<span class="number">-1</span>),--r;</span><br><span class="line"><span class="keyword">if</span>(ask[i].l==ask[i].r)&#123;      <span class="comment">//输出0/1</span></span><br><span class="line">ask[i].A=<span class="number">0</span>;</span><br><span class="line">ask[i].B=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ask[i].A=ans-(ask[i].r-ask[i].l+<span class="number">1</span>);</span><br><span class="line">ask[i].B=(ask[i].r-ask[i].l+<span class="number">1</span>)*(ask[i].r-ask[i].l);</span><br><span class="line">ll tmp=gcd(ask[i].A,ask[i].B);     <span class="comment">//最简</span></span><br><span class="line">ask[i].A/=tmp;</span><br><span class="line">ask[i].B/=tmp;</span><br><span class="line">&#125;</span><br><span class="line">sort(ask+<span class="number">1</span>,ask+m+<span class="number">1</span>,cmp2);     <span class="comment">//按照原排序输出</span></span><br><span class="line">rep(i,<span class="number">1</span>,m)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,ask[i].A,ask[i].B);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2038" target="_blank" rel="noopener">BZOJ 2038 [2009国家集训队]小Z的袜子(hose)</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【学习笔记】非旋Treap</title>
      <link href="/2018/05/09/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E9%9D%9E%E6%97%8BTreap/"/>
      <url>/2018/05/09/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E9%9D%9E%E6%97%8BTreap/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="概念与基本性质"><a href="#概念与基本性质" class="headerlink" title="概念与基本性质"></a>概念与基本性质</h3><blockquote><p>Treap = Tree + Heap，即是一棵同时满足二叉搜索树和堆性质的二叉树<br>Treap 有一个随机附加域满足堆的性质，其结构相当于以随机数据插入的二叉搜索树<br>其基本操作的期望时间复杂度为 O(log n)</p></blockquote><p>相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。</p><a id="more"></a><hr><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><blockquote><ol><li>插入和删除</li><li>访问某位置</li><li>查询某数所在的位置</li></ol></blockquote><hr><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>本题目的是构造名次树来维护一个有序序列<br>为了在保证堆的性质的同时进行如上操作，我们引入下列函数：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">cut</span><span class="params">(u, k)</span></span>      <span class="comment">//将以 u 为根节点的子树在第 k 个节点后切开，并返回切开后两树根节点。</span></span><br><span class="line"><span class="function"><span class="title">merge</span><span class="params">(l, r)</span></span>    <span class="comment">//在维护堆性质的同时将的两棵 Treap 合并为一棵，并返回合并后的根节点。</span></span><br></pre></td></tr></table></figure></p><p>每次cut的位置大概如下：</p><p><img src="https://ws1.sinaimg.cn/large/006sjNcEly1fwp4yoangrj30ej09pq3d.jpg" alt=""></p><h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><blockquote><p>插入 - insert = cut + merge + merge<br>删除 - delete = split + split + merge ? O(log n)<br>排名查询/数值查询 - search ：通过二叉排序树的性质进行查找<br>前驱 - last：将所有比 x 小的数切下，找到其中最大的数后，再合并<br>后继 - next：将所有比 x 小的数（包括）切下，在剩下的树中找出最小的数后，再合并</p></blockquote><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(re i=a;i&lt;=b;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tnode</span>&#123;</span>     <span class="comment">//记录节点状态</span></span><br><span class="line"><span class="keyword">int</span> l,r,val,siz,heap;</span><br><span class="line"><span class="comment">//l,r为节点左右子树，val节点数值 ，siz节点子树大小，heap随机生成</span></span><br><span class="line">&#125; t[<span class="number">100100</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aft</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">do</span>&#123;ch=getchar();<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;&#125;<span class="keyword">while</span>(ch&lt;<span class="string">'0'</span> <span class="keyword">or</span> ch&gt;<span class="string">'9'</span>);</span><br><span class="line"><span class="keyword">do</span>&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;<span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span> <span class="keyword">and</span> ch&lt;=<span class="string">'9'</span>);</span><br><span class="line"><span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;<span class="comment">//更新以u为根的子树的siz</span></span><br><span class="line">t[u].siz=t[t[u].l].siz+t[t[u].r].siz+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> aft <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> k)</span></span>&#123;<span class="comment">//从以u为根的子树上割下k个点</span></span><br><span class="line">aft ans=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;; <span class="comment">//记录切割后左右子树的根节点</span></span><br><span class="line"><span class="keyword">if</span>(!u) <span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">int</span> lsize=t[t[u].l].siz+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=lsize)&#123;<span class="comment">//若需要切下的点比整个左子树多，从右子树继续割</span></span><br><span class="line">ans=cut(t[u].r,k-lsize);</span><br><span class="line">t[u].r=ans.l;</span><br><span class="line">ans.l=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans=cut(t[u].l,k);</span><br><span class="line">t[u].l=ans.r;</span><br><span class="line">ans.r=u;</span><br><span class="line">&#125;</span><br><span class="line">update(u);<span class="comment">//更新以u为根节点的子树的siz</span></span><br><span class="line"><span class="keyword">return</span> ans;<span class="comment">//返回左右子树根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;       <span class="comment">//将两棵树合并（按照heap值（小根堆））并返回根节点</span></span><br><span class="line"><span class="keyword">if</span>(!l) <span class="keyword">return</span> r;<span class="comment">//若左子树为空，返回右子树</span></span><br><span class="line"><span class="keyword">if</span>(!r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">if</span>(t[l].heap&lt;t[r].heap)&#123;    <span class="comment">//若左子树根节点heap比右子树小，将右子树与左子树的右儿子merge</span></span><br><span class="line">t[l].r=merge(t[l].r,r);</span><br><span class="line">update(l);</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//左子树与右子树左儿子merge</span></span><br><span class="line">t[r].l=merge(l,t[r].l);</span><br><span class="line">update(r);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;    <span class="comment">//查询有多少个数严格比x小</span></span><br><span class="line"><span class="keyword">int</span> tmp=root,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tmp)&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;t[tmp].val)&#123;</span><br><span class="line">ans+=t[t[tmp].l].siz+<span class="number">1</span>;</span><br><span class="line">tmp=t[tmp].r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> tmp=t[tmp].l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//插入操作</span></span><br><span class="line">t[++cnt].val=x;</span><br><span class="line">t[cnt].heap=rand();  <span class="comment">//随机生成heap值，使树保持相对平衡</span></span><br><span class="line">t[cnt].siz=<span class="number">1</span>;</span><br><span class="line">aft p=cut(root,rank(x));</span><br><span class="line"><span class="comment">//查找x在树中的rank，将比x小的数从树中切下</span></span><br><span class="line">root=merge(merge(p.l,cnt),p.r);</span><br><span class="line"><span class="comment">//先将x与左子树合并，再将左子树和右子树合并，并更新根节点Root</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;      <span class="comment">//删除操作</span></span><br><span class="line">aft p1=cut(root,rank(x));</span><br><span class="line">aft p2=cut(p1.r,<span class="number">1</span>);</span><br><span class="line">root=merge(p1.l,p2.r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//在以u为根节点的树中，找第x小的数</span></span><br><span class="line"><span class="keyword">int</span> tmp=u;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> val=t[t[tmp].l].siz+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x==val) <span class="keyword">return</span> t[tmp].val;</span><br><span class="line"><span class="keyword">if</span>(x&lt;val) tmp=t[tmp].l;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">x-=val;</span><br><span class="line">tmp=t[tmp].r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sma</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//查找第一个比x小的数</span></span><br><span class="line">aft p=cut(root,rank(x));<span class="comment">//将所有比x小的数切下</span></span><br><span class="line"><span class="keyword">int</span> ans=find(p.l,t[p.l].siz);<span class="comment">//查询切下的数中最大的</span></span><br><span class="line">root=merge(p.l,p.r);          <span class="comment">//合并</span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lar</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;      <span class="comment">//查找第一个比x大的数</span></span><br><span class="line">aft p=cut(root,rank(x+<span class="number">1</span>));<span class="comment">//将所有比x小的数（包括）切下</span></span><br><span class="line"><span class="keyword">int</span> ans=find(p.r,<span class="number">1</span>);<span class="comment">//查询剩下的数中最小的</span></span><br><span class="line">root=merge(p.l,p.r);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=read();</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> opt,x;</span><br><span class="line">opt=read(),x=read();</span><br><span class="line"><span class="keyword">switch</span>(opt)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: ins(x); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: del(x); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rank(x)+<span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,find(root,x)); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sma(x)); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lar(x)); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.org/problemnew/show/P3369" target="_blank" rel="noopener">洛谷 P3369 【模板】普通平衡树（Treap/SBT）</a></p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Treap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World! | 博客导航</title>
      <link href="/2018/05/08/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91Hello%20World!/"/>
      <url>/2018/05/08/%E3%80%90%E6%9D%82%E8%B0%88%E3%80%91Hello%20World!/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Hi，这里是 Vishford，欢迎来到我的博客。</p><blockquote><p>“The size of your dreams must always exceed your current capacity to achieve them. If your dreams do not scare you, they are not big enough.”<br>— Ellen Johnson Sirleaf, 24th President of Liberia</p></blockquote><a id="more"></a><hr><p>我回来了！</p><p>发现好多好多图都挂掉了，以前辛苦画的解题思路也没有了…</p><p>LaTeX也不再支持，不过目前懒得修。</p><p>Updated on 2021.1.9</p><hr><p>博客将会记录一些学习心得，希望能帮助到你。</p><p>由于博主不通文墨，一些文章可能会逻辑混乱辞不达义导致聱牙诘曲晦涩难懂，你可以在评论区留言或给我发邮件。</p><p>若出现文章图片无法加载的问题，请开全局后刷新页面（图床不太稳定还请见谅）</p><p>p.s. 侧边栏时常更新的精选歌单千万不要错过哦~</p><p>Have a nice day！</p><p>Updated on 2018.9.27</p><hr><p>经过了整整一天的调试<br><del>在@<a href="https://xianyu626.github.io/" target="_blank" rel="noopener">北咸冥鱼</a> 的帮助下</del><br>博客总算是建好了<br>接下来应该会发一些算法题解之类的吧…</p><p>Vishford<br>2018.5.8</p>]]></content>
      
      
    </entry>
    
  
  
</search>
